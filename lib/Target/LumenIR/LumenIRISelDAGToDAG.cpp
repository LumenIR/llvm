//===-- LumenIRISelDAGToDAG.cpp - A dag to dag inst selector for LumenIR ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the LumenIR target.
//
//===----------------------------------------------------------------------===//

#include "LumenIR.h"
#include "LumenIRTargetMachine.h"
#include "MCTargetDesc/LumenIRMCTargetDesc.h"

#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"

#define DEBUG_TYPE "lumenir-isel"

namespace llvm {

/// Lowers LLVM IR (in DAG form) to LumenIR MC instructions (in DAG form).
class LumenIRDAGToDAGISel : public SelectionDAGISel {
public:
  LumenIRDAGToDAGISel(LumenIRTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(nullptr) {}

  StringRef getPassName() const override {
    return "LumenIR DAG->DAG Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

// Include the pieces autogenerated from the target description.
#include "LumenIRGenDAGISel.inc"

private:
  void Select(SDNode *N) override;

  template <unsigned NodeType> bool select(SDNode *N);

  const LumenIRSubtarget *Subtarget;
};

bool LumenIRDAGToDAGISel::runOnMachineFunction(MachineFunction &MF) {
  Subtarget = &MF.getSubtarget<LumenIRSubtarget>();
  return SelectionDAGISel::runOnMachineFunction(MF);
}


void LumenIRDAGToDAGISel::Select(SDNode *N) {
  // Dump information about the Node being selected
  DEBUG(errs() << "Selecting: "; N->dump(CurDAG); dbgs() << "\n");

  // If we have a custom node, we already have selected!
  if (N->isMachineOpcode()) {
    DEBUG(dbgs() << "== "; N->dump(CurDAG); dbgs() << "\n");
    N->setNodeId(-1);
    return;
  }

  // Select the default instruction
  SelectCode(N);
}


FunctionPass *createLumenIRISelDag(LumenIRTargetMachine &TM,
                               CodeGenOpt::Level OptLevel) {
  return new LumenIRDAGToDAGISel(TM, OptLevel);
}

} // end of namespace llvm

