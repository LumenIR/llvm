//===-- LumenIRISelDAGToDAG.cpp - A dag to dag inst selector for LumenIR ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the LumenIR target.
//
//===----------------------------------------------------------------------===//

#include "LumenIR.h"
#include "LumenIRTargetMachine.h"
#include "MCTargetDesc/LumenIRMCTargetDesc.h"

#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"

#define DEBUG_TYPE "lumenir-isel"

namespace llvm {

/// Lowers LLVM IR (in DAG form) to LumenIR MC instructions (in DAG form).
class LumenIRDAGToDAGISel : public SelectionDAGISel {
public:
  LumenIRDAGToDAGISel(LumenIRTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(nullptr) {}

  StringRef getPassName() const override {
    return "LumenIR DAG->DAG Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

  // Complex Pattern Selectors.
  bool SelectAddrFI(SDValue &N, SDValue &R);

// Include the pieces autogenerated from the target description.
#include "LumenIRGenDAGISel.inc"

private:
  void Select(SDNode *N) override;

  bool trySelect(SDNode *N);

  template <unsigned NodeType> bool select(SDNode *N);

  const LumenIRSubtarget *Subtarget;
};

bool LumenIRDAGToDAGISel::runOnMachineFunction(MachineFunction &MF) {
  Subtarget = &MF.getSubtarget<LumenIRSubtarget>();
  return SelectionDAGISel::runOnMachineFunction(MF);
}


void LumenIRDAGToDAGISel::Select(SDNode *N) {
  // Dump information about the Node being selected
  DEBUG(dbgs() << "Selecting: "; N->dump(CurDAG); dbgs() << "\n");

  // If we have a custom node, we already have selected!
  if (N->isMachineOpcode()) {
    DEBUG(dbgs() << "== "; N->dump(CurDAG); dbgs() << "\n");
    N->setNodeId(-1);
    return;
  }

  if (trySelect(N)) {
    return;
  }

  // Try to select via table gen selector
  SelectCode(N);
}



template<>
bool LumenIRDAGToDAGISel::select<ISD::Constant>(SDNode *N) {
  const ConstantSDNode *CV = cast<ConstantSDNode>(N);
  SDLoc DL(N);

  //TODO others MVT
  SDValue TC  = CurDAG->getTargetConstant(*CV->getConstantIntValue(), DL, MVT::i32);


  SDNode *LoadData = CurDAG->getMachineNode(LumenIR::LoadData, DL, MVT::i32, TC);


  ReplaceNode(N, LoadData);
  DEBUG(
    dbgs() << "  selected: ";
    LoadData->dump(CurDAG);
    dbgs() << "\n";
  );

  return true;
}

template<>
bool LumenIRDAGToDAGISel::select<ISD::STORE>(SDNode *N) {
  const StoreSDNode *ST = cast<StoreSDNode>(N);

  if (FrameIndexSDNode *FI = dyn_cast<FrameIndexSDNode>(ST->getOperand(2))) {
    if(ConstantSDNode *V = dyn_cast<ConstantSDNode>(ST->getOperand(1))) {
        SDValue TFI = CurDAG->getTargetFrameIndex(FI->getIndex(), MVT::i16);
        SDValue TC  = CurDAG->getTargetConstant(*V->getConstantIntValue(),SDLoc(N), MVT::i32);


        SmallVector<SDValue, 8> ops;
        ops.push_back(TFI);
        ops.push_back(TC);
        ops.push_back(N->getOperand(0));

        SDNode *StoreToStack = CurDAG->getMachineNode(LumenIR::StoreToStackII, SDLoc(N), MVT::Other, MVT::Glue, ops);


        ReplaceNode(N, StoreToStack);
        DEBUG(
          dbgs() << "  selected: ";
          StoreToStack->dump(CurDAG);
          dbgs() << "\n";
        );
        return true;
    }
    if(RegisterSDNode *R = dyn_cast<RegisterSDNode>(ST->getOperand(1))) {
        SDValue TFI = CurDAG->getTargetFrameIndex(FI->getIndex(), MVT::i16);
        SDValue TR  = CurDAG->getRegister(R->getReg(), MVT::i32);

        SmallVector<SDValue, 8> ops;
        ops.push_back(TFI);
        ops.push_back(TR);
        ops.push_back(N->getOperand(0));

        SDNode *StoreToStack = CurDAG->getMachineNode(LumenIR::StoreToStackIR, SDLoc(N), MVT::Other, MVT::Glue, ops);


        ReplaceNode(N, StoreToStack);
        DEBUG(
          dbgs() << "  selected: ";
          StoreToStack->dump(CurDAG);
          dbgs() << "\n";
        );
        return true;
    }

  }

  return false;
}

// this method need to separate return void
template<>
bool LumenIRDAGToDAGISel::select<LumenIRISD::RETURN>(SDNode *N) {

  if(N->getNumOperands() == 1) {
    SDNode *Return = CurDAG->getMachineNode(LumenIR::ReturnVoid, SDLoc(N), MVT::Other, N->getOperand(0));

    ReplaceNode(N, Return);
    DEBUG(
      dbgs() << "  selected: ";
      Return->dump(CurDAG);
      dbgs() << "\n";
    );

    return true;
  }

  return false;
}

bool LumenIRDAGToDAGISel::trySelect(SDNode *N) {
  switch (N->getOpcode()) {
    default: return false;
    case ISD::Constant:      return select<ISD::Constant>(N);
    case ISD::STORE:         return select<ISD::STORE>(N);
    case LumenIRISD::RETURN: return select<LumenIRISD::RETURN>(N);
  }
}

// Complex Pattern Selectors.
bool LumenIRDAGToDAGISel::SelectAddrFI(SDValue &N, SDValue &R) {
  if (N.getOpcode() != ISD::FrameIndex) {
    return false;
  }
  int FX = cast<FrameIndexSDNode>(N)->getIndex();
  MachineFrameInfo &MFI = MF->getFrameInfo();
  if (!MFI.isFixedObjectIndex(FX)) {
    return false;
  }
  R = CurDAG->getTargetFrameIndex(FX, MVT::i16);
  return true;
}


FunctionPass *createLumenIRISelDag(LumenIRTargetMachine &TM,
                               CodeGenOpt::Level OptLevel) {
  return new LumenIRDAGToDAGISel(TM, OptLevel);
}

} // end of namespace llvm

