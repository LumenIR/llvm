//===-- LumenIRISelDAGToDAG.cpp - A dag to dag inst selector for LumenIR ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the LumenIR target.
//
//===----------------------------------------------------------------------===//

#include "LumenIR.h"
#include "LumenIRTargetMachine.h"
#include "MCTargetDesc/LumenIRMCTargetDesc.h"

#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"

#define DEBUG_TYPE "lumenir-isel"

namespace llvm {

/// Lowers LLVM IR (in DAG form) to LumenIR MC instructions (in DAG form).
class LumenIRDAGToDAGISel : public SelectionDAGISel {
public:
  LumenIRDAGToDAGISel(LumenIRTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel), Subtarget(nullptr) {}

  StringRef getPassName() const override {
    return "LumenIR DAG->DAG Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

  // Complex Pattern Selectors.
  bool SelectAddrFI(SDValue &N, SDValue &R);

// Include the pieces autogenerated from the target description.
#include "LumenIRGenDAGISel.inc"

private:
  void Select(SDNode *N) override;

  bool trySelect(SDNode *N);

  template <unsigned NodeType> bool select(SDNode *N, SDNode **R);

  const LumenIRSubtarget *Subtarget;
};

bool LumenIRDAGToDAGISel::runOnMachineFunction(MachineFunction &MF) {
  Subtarget = &MF.getSubtarget<LumenIRSubtarget>();
  return SelectionDAGISel::runOnMachineFunction(MF);
}


void LumenIRDAGToDAGISel::Select(SDNode *N) {
  // Dump information about the Node being selected
  DEBUG(dbgs() << "Selecting: "; N->dump(CurDAG); dbgs() << "\n");

  // If we have a custom node, we already have selected!
  if (N->isMachineOpcode()) {
    DEBUG(dbgs() << "== "; N->dump(CurDAG); dbgs() << "\n");
    N->setNodeId(-1);
    return;
  }

  if (trySelect(N)) {
    return;
  }

  // Try to select via table gen selector
  SelectCode(N);
}



template<>
bool LumenIRDAGToDAGISel::select<ISD::Constant>(SDNode *N, SDNode **R) {
  const ConstantSDNode *CV = cast<ConstantSDNode>(N);
  SDLoc DL(N);

  //TODO others MVT
  SDValue TC  = CurDAG->getTargetConstant(*CV->getConstantIntValue(), DL, MVT::i32);


  SDNode *LoadData = CurDAG->getMachineNode(LumenIR::LoadData, DL, MVT::i32, TC);


  ReplaceNode(N, LoadData);
  *R = LoadData;

  return true;
}

template<>
bool LumenIRDAGToDAGISel::select<ISD::STORE>(SDNode *N, SDNode **R) {
  MachineRegisterInfo &RI = MF->getRegInfo();
  const StoreSDNode *ST = cast<StoreSDNode>(N);
  SDValue Chain = ST->getChain();
  SDLoc DL(N);

  if (FrameIndexSDNode *FI = dyn_cast<FrameIndexSDNode>(ST->getOperand(2))) {
    SDValue TFI = CurDAG->getTargetFrameIndex(FI->getIndex(), MVT::i32);
    SmallVector<SDValue, 8> Ops;
    Ops.push_back(TFI);


    if(ConstantSDNode *V = dyn_cast<ConstantSDNode>(ST->getOperand(1))) {
      SDValue TC  = CurDAG->getTargetConstant(*V->getConstantIntValue(),SDLoc(N), MVT::i32);

      SDNode *Reg = CurDAG->getMachineNode(LumenIR::LoadData, DL, MVT::i32, TC);

      Ops.push_back(SDValue(Reg,0));
      Ops.push_back(Chain);
    } else {
      Ops.push_back(ST->getOperand(1));
      Ops.push_back(Chain);
    }
    SDNode *StoreToStack = CurDAG->getMachineNode(LumenIR::StoreToStackVRR32, DL, MVT::Other, MVT::Glue, Ops);

    ReplaceNode(N, StoreToStack);
    *R = StoreToStack;

    return true;
  }
  return false;
}

template<>
bool LumenIRDAGToDAGISel::select<ISD::LOAD>(SDNode *N, SDNode **R) {
  const auto *LD = cast<LoadSDNode>(N);
  SDValue Chain = LD->getChain();

  unsigned Opc = 0;
  SmallVector<SDValue, 8> Ops;

  if (auto *FI = dyn_cast<FrameIndexSDNode>(LD->getOperand(1))) {
    switch (N->getSimpleValueType(0).SimpleTy) {
    default:
        llvm_unreachable("loading some type from stack is not implemented yet");
    case MVT::i8:
        Opc = LumenIR::LoadFromStack8;
    case MVT::i16:
        Opc = LumenIR::LoadFromStack16;
    case MVT::i32:
        Opc = LumenIR::LoadFromStack32;
//TODO
//    case MVT::i64:
//        Opc = LumenIR::LoadFromStack64;
    }
    SDValue TFI = CurDAG->getTargetFrameIndex(FI->getIndex(), MVT::i32);

    Ops.push_back(TFI);
    Ops.push_back(Chain);

    SDNode *LoadFromStack = CurDAG->getMachineNode(Opc, SDLoc(N), N->getSimpleValueType(0), MVT::Glue, Ops);


    ReplaceUses(SDValue(N, 0), SDValue(LoadFromStack,0));
    ReplaceUses(SDValue(N, 1), SDValue(LoadFromStack,1));
    CurDAG->RemoveDeadNode(N);

//    ReplaceNode(N, LoadFromStack);
    *R = LoadFromStack;
    return true;

  } else if (auto *GA = dyn_cast<GlobalAddressSDNode>(LD->getOperand(1))) {
    switch (N->getSimpleValueType(0).SimpleTy) {
    default:
        llvm_unreachable("loading some type from stack is not implemented yet");
    case MVT::i8:
        Opc = LumenIR::Load8;
    case MVT::i16:
        Opc = LumenIR::Load16;
    case MVT::i32:
        Opc = LumenIR::Load32;
//TODO
//    case MVT::i64:
//        Opc = LumenIR::Load64;
    }
    SDValue TGA = CurDAG->getTargetGlobalAddress(GA->getGlobal(), SDLoc(N), MVT::i32, 0, 0);

    Ops.push_back(TGA);
    Ops.push_back(Chain);

    SDNode *Load = CurDAG->getMachineNode(Opc, SDLoc(N), N->getSimpleValueType(0), MVT::Glue, Ops);

    ReplaceUses(SDValue(N, 0), SDValue(Load, 0));
    ReplaceUses(SDValue(N, 1), SDValue(Load, 1));
    CurDAG->RemoveDeadNode(N);

    *R = Load;
    return true;

  }
  return false;
}

template<>
bool LumenIRDAGToDAGISel::select<ISD::FrameIndex>(SDNode *N, SDNode **R) {
  return false;

  DataLayout DL = CurDAG->getDataLayout();

  int FI = cast<FrameIndexSDNode>(N)->getIndex();

  auto PtrTy = getTargetLowering()->getPointerTy(DL);

  SDValue TFI = CurDAG->getTargetFrameIndex(FI, PtrTy);

  SDNode* GetPtr = CurDAG->getMachineNode(LumenIR::GetPtrFromFI, SDLoc(N), PtrTy, TFI);

  ReplaceNode(N, GetPtr);
  *R = GetPtr;

  return true;
}

// this method need to separate return void
template<>
bool LumenIRDAGToDAGISel::select<LumenIRISD::RETURN>(SDNode *N, SDNode **R) {

  if(N->getNumOperands() == 1) {
    SDNode *Return = CurDAG->getMachineNode(LumenIR::ReturnVoid, SDLoc(N), MVT::Other, N->getOperand(0));

    ReplaceNode(N, Return);

    *R = Return;
    return true;
  }

  return false;
}

bool LumenIRDAGToDAGISel::trySelect(SDNode *N) {

  bool result = false;
  SDNode *R = nullptr;
  switch (N->getOpcode()) {
    default: return false;
    case ISD::Constant:      result = select<ISD::Constant>(N, &R);         break;
    case ISD::STORE:         result = select<ISD::STORE>(N, &R);            break;
    case ISD::LOAD:          result = select<ISD::LOAD>(N, &R);             break;
    case ISD::FrameIndex:    result = select<ISD::FrameIndex>(N, &R);       break;
    case LumenIRISD::RETURN: result = select<LumenIRISD::RETURN>(N, &R);    break;
  }

  DEBUG(
    if(result) {
      assert(R != nullptr && "select<ISD::*>() should set new SDNode or return false");
      dbgs() << "  selected: ";
      R->dump(CurDAG);
      dbgs() << "\n";
    }
  );

  return result;
}

// Complex Pattern Selectors.
bool LumenIRDAGToDAGISel::SelectAddrFI(SDValue &N, SDValue &R) {
  if (N.getOpcode() != ISD::FrameIndex) {
    return false;
  }
  int FX = cast<FrameIndexSDNode>(N)->getIndex();
  MachineFrameInfo &MFI = MF->getFrameInfo();
  if (!MFI.isFixedObjectIndex(FX)) {
    return false;
  }
  R = CurDAG->getTargetFrameIndex(FX, MVT::i16);
  return true;
}


FunctionPass *createLumenIRISelDag(LumenIRTargetMachine &TM,
                               CodeGenOpt::Level OptLevel) {
  return new LumenIRDAGToDAGISel(TM, OptLevel);
}

} // end of namespace llvm

